import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class lesson_13_20 {
    //Синтаксический сахар

    //Хитрые особенности языка, которые позволяют использовать более короткий путь (писать меньше кода), называют синтаксическим сахаром.

    //Разработчики Java сделали все, чтобы устранить из Java всю возможную избыточность.
    //Если в C++ что-то можно сделать десятью способами, в Java чаще всего это можно сделать только одним способом.
    //Но такая унификация не нравится ни Java-программистам, ни создателям Java.
    //И иногда они упрощают жизнь обычным ребятам вроде нас с вами.
    //Вы, кстати, уже познакомились с вещью, которую можно отнести к синтаксическому сахару — это autoboxing и unboxing.

    //Выведение типа переменной – var
    //В Java 11 компилятор стал еще умнее и теперь может определить тип создаваемой переменной по типу значения, которое ей присваивают.
    //Выглядит это в коде так:
    //var имя = значение;

    //Где имя — это имя новой переменной, значение — ее стартовое значение, а var — это ключевое слово, используемое для объявления переменной.
    //Тип у переменной имя будет такой же, как у значения, которое ей присваивают.

    //Примеры:
    //Как этот код видим мы	                                Что видит компилятор
    //var i = 1;                                            int i = 1;
    //var s = "Привет";                                     String s = "Привет";
    //var console = new Scanner(System.in);                 Scanner console = new Scanner(System.in);
    //var list = new ArrayList<String>();                   ArrayList<String> list = new ArrayList<String>();
    //var data = new int[]{1, 2, 3};                        int[] data = new int[]{1, 2, 3};

    //Компилятор сам определяет или, как еще говорят, выводит тип переменной на основе значения, которое ей присваивают.
    //Немало копий было сломлено в баталиях программистов на тему того, стоит ли добавлять такую возможность в язык или нет.
    //Многие боялись, что использованием var начнут злоупотреблять, и читаемость кода сильно снизится.
    //Доля истины в этом есть, так что лучше всего использовать var там, где это повышает читабельность кода.
    //Случай 1: глядя на значение переменной сразу ясно, какой тип у переменной
    //Случай 2: тип переменной не важен для понимания кода
    //Часто в коде могут быть ситуации, когда у переменной не вызываются никакие методы –
    //переменная просто используется для временного хранения чего-либо.
    //Использование var тут абсолютно не снижает понимание кода

    //В классе lesson_13_20 есть поля number, string и метод main с объявленными в нем переменными.
    //Тебе нужно заменить объявления переменных на var, где это возможно. Порядок следования переменных не должен меняться.
    //Пример:
    //Scanner console = new Scanner(System.in);
    //Заменить на:
    //var console = new Scanner(System.in);

    private int number = 54;
    private String string = "string";

    public static void main(String[] args) {
        var integer = 22;
        var string = "string";
        var array = new int[5];
        var strings = new ArrayList<String>();
        var bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        var maxValue = Integer.valueOf(Integer.MAX_VALUE);
    }

}
