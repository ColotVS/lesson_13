public class lesson_13_26 {
    //Причина возникновения шаблонов (коллекции)
    //Когда Java-разработчики только создавали класс ArrayList, они хотели сделать его универсальным,
    //чтобы в нем можно было хранить объекты любого типа.
    //Поэтому для хранения элементов они воспользовались массивом типа Object.

    //Сильная сторона такого подхода в том, что в коллекцию можно добавить объект любого типа.

    //Ну а слабых сразу несколько.

    //Недостаток 1.
    //Всегда приходилось писать оператор преобразования типа, когда доставали элементы из коллекции:
    //Код	                                        Примечание
    //ArrayList numbers = new ArrayList();          Создаем объект-коллекцию для хранения ссылок на объекты типа Object
    //
    //
    //for (int i = 0; i < 10; i++)                  Заполняем коллекцию цифрами 10, 20, ... 100;
    //   numbers.add(i * 10);
    //
    //
    //int sum = 0;
    //for (int i = 0; i < 10; i++)                  Суммируем элементы коллекции
    //{
    //   sum = sum + (Integer) numbers.get(i)       Нужно использовать приведение типа
    //}

    //Недостаток 2.
    //Не было гарантии, что в коллекции хранятся элементы определенного типа
    //Код	                                        Примечание
    //ArrayList numbers = new ArrayList();          Создаем объект-коллекцию для хранения ссылок на объекты типа Object
    //
    //
    //for (int i = 0; i < 10; i++)                  Заполняем коллекцию числами типа Double:0.0, 2.5, 5.0, ...
    //   numbers.add(i * 2.5);
    //
    //
    //int sum = 0;
    //for (int i = 0; i < 10; i++)                  Суммируем элементы коллекции
    //{
    //   sum = sum + (Integer) numbers.get(i);      Будет ошибка: тип Double нельзя привести к типу Integer
    //}

    //Данные в коллекцию могут заполняться где угодно:
    //в другом методе
    //в другой программе
    //загружаться из файла
    //получаться по сети

    //Недостаток 3.
    //Данные коллекции можно случайно поменять по незнанию.
    //Вы можете передать коллекцию, заполненную вашими данными в какой-то метод, а этот метод,
    //написанный совсем другим программистом, добавит в вашу коллекцию свои данные.
    //По названию коллекции непонятно, какие именно типы данных можно в ней хранить.
    //А даже если и дать переменной такое название, ссылку на нее можно передать в десяток методов,
    //и уж там-то точно об изначальном имени переменной ничего не будет известно.
}
